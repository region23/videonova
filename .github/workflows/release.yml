name: Release

on:
  push:
    branches:
      - main

jobs:
  # Add a job to generate release notes
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      release_notes: ${{ steps.generate-notes.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tauri.conf.json
        id: get-version
        run: |
          VERSION=$(grep -o '"version": "[^"]*"' src-tauri/tauri.conf.json | cut -d '"' -f 4)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Generate release notes
        id: generate-notes
        uses: actions/github-script@v6
        with:
          script: |
            const { data: notes } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.get-version.outputs.version }}`,
              previous_tag_name: context.payload.before ? context.payload.before.substring(0, 7) : undefined,
            });
            return notes.body;
      
      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.get-version.outputs.version }}`,
              name: `Videonova v${{ steps.get-version.outputs.version }}`,
              body: `${{ steps.generate-notes.outputs.result }}`,
              draft: true,
              prerelease: false,
              generate_release_notes: false
            });
            return release.id;

  # Update the build job to use the generated release notes
  release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # Install Node.js and setup cache
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      # Install pnpm
      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      # Install dependencies (Linux)
      - name: Install dependencies (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: pnpm install

      # Build the app
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          releaseBody: ${{ needs.create-release.outputs.release_notes }}
          releaseDraft: true
          prerelease: false 